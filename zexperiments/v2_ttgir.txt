#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [2, 2], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#mma = #triton_gpu.mma<{versionMajor = 2, versionMinor = 0, warpsPerCTA = [4, 1]}>
#shared = #triton_gpu.shared<{vec = 4, perPhase = 1, maxPhase = 8, order = [1, 0]}>
#shared1 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 4, order = [1, 0]}>
#shared2 = #triton_gpu.shared<{vec = 8, perPhase = 1, maxPhase = 4, order = [0, 1]}>
module attributes {"triton_gpu.num-warps" = 4 : i32, "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @page_attn_kernel_v2_0d1d2d3d4d5d678c(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<i32> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<i32> {tt.divisibility = 16 : i32}, %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg6: i32, %arg7: i32) attributes {noinline = false} {
    %c1_i32 = arith.constant 1 : i32
    %c2_i32 = arith.constant 2 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<16x128xf32, #mma>
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16x32xf32, #mma>
    %cst_1 = arith.constant dense<128> : tensor<16x1xi32, #blocked>
    %cst_2 = arith.constant dense<1> : tensor<16x1xi32, #blocked>
    %cst_3 = arith.constant dense<32> : tensor<128x1xi32, #blocked1>
    %c31_i32 = arith.constant 31 : i32
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<16xf32, #blocked2>
    %c0_i32 = arith.constant 0 : i32
    %cst_5 = arith.constant dense<0xFF800000> : tensor<16xf32, #blocked2>
    %c32_i32 = arith.constant 32 : i32
    %c128_i32 = arith.constant 128 : i32
    %0 = tt.get_program_id x : i32
    %1 = arith.divsi %0, %arg6 : i32
    %2 = arith.remsi %0, %arg6 : i32
    %3 = tt.addptr %arg2, %1 : !tt.ptr<i32>, i32
    %4 = tt.load %3 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : i32
    %5 = arith.muli %1, %arg6 : i32
    %6 = arith.addi %5, %2 : i32
    %7 = arith.muli %6, %c128_i32 : i32
    %8 = tt.addptr %arg1, %7 : !tt.ptr<f32>, i32
    %9 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>
    %10 = tt.expand_dims %9 {axis = 1 : i32} : (tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) -> tensor<16x1xi32, #blocked>
    %11 = arith.muli %10, %cst_1 : tensor<16x1xi32, #blocked>
    %12 = tt.splat %8 : (!tt.ptr<f32>) -> tensor<16x1x!tt.ptr<f32>, #blocked>
    %13 = tt.addptr %12, %11 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked>
    %14 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>
    %15 = tt.expand_dims %14 {axis = 0 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>>) -> tensor<1x128xi32, #blocked>
    %16 = tt.broadcast %13 : (tensor<16x1x!tt.ptr<f32>, #blocked>) -> tensor<16x128x!tt.ptr<f32>, #blocked>
    %17 = tt.broadcast %15 : (tensor<1x128xi32, #blocked>) -> tensor<16x128xi32, #blocked>
    %18 = tt.addptr %16, %17 : tensor<16x128x!tt.ptr<f32>, #blocked>, tensor<16x128xi32, #blocked>
    %19 = "triton_gpu.cmpi"(%10, %cst_2) <{predicate = 2 : i64}> : (tensor<16x1xi32, #blocked>, tensor<16x1xi32, #blocked>) -> tensor<16x1xi1, #blocked>
    %20 = tt.broadcast %19 : (tensor<16x1xi1, #blocked>) -> tensor<16x128xi1, #blocked>
    %21 = tt.load %18, %20 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16x128xf32, #blocked>
    %22 = triton_gpu.convert_layout %21 : (tensor<16x128xf32, #blocked>) -> tensor<16x128xf32, #shared>
    %23 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>
    %24 = tt.expand_dims %23 {axis = 1 : i32} : (tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>>) -> tensor<128x1xi32, #blocked1>
    %25 = arith.muli %24, %cst_3 : tensor<128x1xi32, #blocked1>
    %26 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>
    %27 = tt.expand_dims %26 {axis = 0 : i32} : (tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>>) -> tensor<1x32xi32, #blocked1>
    %28 = tt.broadcast %25 : (tensor<128x1xi32, #blocked1>) -> tensor<128x32xi32, #blocked1>
    %29 = tt.broadcast %27 : (tensor<1x32xi32, #blocked1>) -> tensor<128x32xi32, #blocked1>
    %30 = arith.addi %28, %29 : tensor<128x32xi32, #blocked1>
    %31 = arith.addi %4, %c31_i32 : i32
    %32 = arith.divsi %31, %c32_i32 : i32
    %33 = arith.muli %1, %arg7 : i32
    %34 = tt.addptr %arg3, %33 : !tt.ptr<i32>, i32
    %35 = arith.muli %2, %c128_i32 : i32
    %36 = arith.muli %35, %c32_i32 : i32
    %37 = tt.splat %arg4 : (!tt.ptr<f32>) -> tensor<128x32x!tt.ptr<f32>, #blocked1>
    %38 = tt.splat %arg5 : (!tt.ptr<f32>) -> tensor<128x32x!tt.ptr<f32>, #blocked1>
    %39 = arith.cmpi sgt, %32, %c0_i32 : i32
    %40 = tt.addptr %34, %c0_i32 : !tt.ptr<i32>, i32
    %41 = tt.load %40, %39 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : i32
    %42 = arith.muli %41, %arg6 : i32
    %43 = arith.muli %42, %c128_i32 : i32
    %44 = arith.muli %43, %c32_i32 : i32
    %45 = arith.addi %44, %36 : i32
    %46 = tt.splat %45 : (i32) -> tensor<128x32xi32, #blocked1>
    %47 = arith.addi %46, %30 : tensor<128x32xi32, #blocked1>
    %48 = tt.addptr %37, %47 : tensor<128x32x!tt.ptr<f32>, #blocked1>, tensor<128x32xi32, #blocked1>
    %49 = triton_gpu.alloc_tensor : tensor<2x128x32xf32, #shared1>
    %50 = tt.splat %39 : (i1) -> tensor<128x32xi1, #blocked1>
    %51 = triton_gpu.insert_slice_async %48, %49, %c0_i32, %50 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32x!tt.ptr<f32>, #blocked1> -> tensor<2x128x32xf32, #shared1>
    triton_gpu.async_commit_group
    %52 = tt.addptr %38, %47 : tensor<128x32x!tt.ptr<f32>, #blocked1>, tensor<128x32xi32, #blocked1>
    %53 = triton_gpu.alloc_tensor : tensor<2x128x32xf32, #shared1>
    %54 = triton_gpu.insert_slice_async %52, %53, %c0_i32, %50 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32x!tt.ptr<f32>, #blocked1> -> tensor<2x128x32xf32, #shared1>
    triton_gpu.async_commit_group
    triton_gpu.async_wait {num = 0 : i32}
    %55 = triton_gpu.extract_slice %51[0, 0, 0] [1, 128, 32] [1, 1, 1] : tensor<2x128x32xf32, #shared1> to tensor<128x32xf32, #shared1>
    %56:9 = scf.for %arg8 = %c0_i32 to %32 step %c1_i32 iter_args(%arg9 = %cst_4, %arg10 = %cst_5, %arg11 = %cst, %arg12 = %51, %arg13 = %54, %arg14 = %55, %arg15 = %c0_i32, %arg16 = %c1_i32, %arg17 = %c1_i32) -> (tensor<16xf32, #blocked2>, tensor<16xf32, #blocked2>, tensor<16x128xf32, #mma>, tensor<2x128x32xf32, #shared1>, tensor<2x128x32xf32, #shared1>, tensor<128x32xf32, #shared1>, i32, i32, i32)  : i32 {
      %70 = triton_gpu.convert_layout %arg10 : (tensor<16xf32, #blocked2>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>
      %71 = triton_gpu.convert_layout %arg10 : (tensor<16xf32, #blocked2>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>
      %72 = tt.addptr %34, %arg8 : !tt.ptr<i32>, i32
      %73 = tt.load %72 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : i32
      %74 = arith.muli %73, %arg6 : i32
      %75 = arith.muli %74, %c128_i32 : i32
      %76 = arith.muli %75, %c32_i32 : i32
      %77 = arith.addi %76, %36 : i32
      %78 = tt.splat %77 : (i32) -> tensor<128x32xi32, #blocked1>
      %79 = arith.addi %78, %30 : tensor<128x32xi32, #blocked1>
      %80 = triton_gpu.convert_layout %22 : (tensor<16x128xf32, #shared>) -> tensor<16x128xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>>
      %81 = triton_gpu.convert_layout %arg14 : (tensor<128x32xf32, #shared1>) -> tensor<128x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>>
      %82 = tt.dot %80, %81, %cst_0 {allowTF32 = true} : tensor<16x128xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<128x32xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<16x32xf32, #mma>
      %83 = triton_gpu.convert_layout %82 : (tensor<16x32xf32, #mma>) -> tensor<16x32xf32, #blocked3>
      %84 = "tt.reduce"(%83) <{axis = 1 : i32}> ({
      ^bb0(%arg18: f32, %arg19: f32):
        %139 = tt.pure_extern_elementwise %arg18, %arg19 {libname = "libdevice", libpath = "/home/allan/.conda/envs/hidet/lib/python3.9/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", symbol = "__nv_fmaxf"} : (f32, f32) -> f32
        tt.reduce.return %139 : f32
      }) : (tensor<16x32xf32, #blocked3>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>
      %85 = "tt.reduce"(%82) <{axis = 1 : i32}> ({
      ^bb0(%arg18: f32, %arg19: f32):
        %139 = tt.pure_extern_elementwise %arg18, %arg19 {libname = "libdevice", libpath = "/home/allan/.conda/envs/hidet/lib/python3.9/site-packages/triton/language/../third_party/cuda/lib/libdevice.10.bc", symbol = "__nv_fmaxf"} : (f32, f32) -> f32
        tt.reduce.return %139 : f32
      }) : (tensor<16x32xf32, #mma>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>
      %86 = triton_gpu.convert_layout %84 : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<16xf32, #blocked2>
      %87 = "triton_gpu.cmpf"(%86, %arg10) <{predicate = 2 : i64}> : (tensor<16xf32, #blocked2>, tensor<16xf32, #blocked2>) -> tensor<16xi1, #blocked2>
      %88 = "triton_gpu.cmpf"(%84, %70) <{predicate = 2 : i64}> : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>, tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<16xi1, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>
      %89 = "triton_gpu.cmpf"(%85, %71) <{predicate = 2 : i64}> : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<16xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>>
      %90 = "triton_gpu.select"(%87, %86, %arg10) : (tensor<16xi1, #blocked2>, tensor<16xf32, #blocked2>, tensor<16xf32, #blocked2>) -> tensor<16xf32, #blocked2>
      %91 = "triton_gpu.select"(%88, %84, %70) : (tensor<16xi1, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>, tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>, tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>
      %92 = "triton_gpu.select"(%89, %85, %71) : (tensor<16xi1, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>
      %93 = tt.expand_dims %91 {axis = 1 : i32} : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<16x1xf32, #blocked3>
      %94 = tt.expand_dims %92 {axis = 1 : i32} : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<16x1xf32, #mma>
      %95 = tt.broadcast %93 : (tensor<16x1xf32, #blocked3>) -> tensor<16x32xf32, #blocked3>
      %96 = tt.broadcast %94 : (tensor<16x1xf32, #mma>) -> tensor<16x32xf32, #mma>
      %97 = arith.subf %83, %95 : tensor<16x32xf32, #blocked3>
      %98 = arith.subf %82, %96 : tensor<16x32xf32, #mma>
      %99 = math.exp %97 : tensor<16x32xf32, #blocked3>
      %100 = math.exp %98 : tensor<16x32xf32, #mma>
      %101 = arith.subf %arg10, %90 : tensor<16xf32, #blocked2>
      %102 = arith.subf %71, %92 : tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>
      %103 = math.exp %101 : tensor<16xf32, #blocked2>
      %104 = math.exp %102 : tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>
      %105 = arith.mulf %arg9, %103 : tensor<16xf32, #blocked2>
      %106 = "tt.reduce"(%99) <{axis = 1 : i32}> ({
      ^bb0(%arg18: f32, %arg19: f32):
        %139 = arith.addf %arg18, %arg19 : f32
        tt.reduce.return %139 : f32
      }) : (tensor<16x32xf32, #blocked3>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>
      %107 = triton_gpu.convert_layout %106 : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>>) -> tensor<16xf32, #blocked2>
      %108 = arith.addf %105, %107 : tensor<16xf32, #blocked2>
      %109 = tt.addptr %38, %79 : tensor<128x32x!tt.ptr<f32>, #blocked1>, tensor<128x32xi32, #blocked1>
      %110 = tt.load %109 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32xf32, #blocked1>
      %111 = triton_gpu.convert_layout %110 : (tensor<128x32xf32, #blocked1>) -> tensor<128x32xf32, #shared1>
      %112 = tt.trans %111 : (tensor<128x32xf32, #shared1>) -> tensor<32x128xf32, #shared2>
      %113 = tt.expand_dims %104 {axis = 1 : i32} : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<16x1xf32, #mma>
      %114 = tt.broadcast %113 : (tensor<16x1xf32, #mma>) -> tensor<16x128xf32, #mma>
      %115 = arith.mulf %arg11, %114 : tensor<16x128xf32, #mma>
      %116 = triton_gpu.convert_layout %100 : (tensor<16x32xf32, #mma>) -> tensor<16x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>>
      %117 = triton_gpu.convert_layout %112 : (tensor<32x128xf32, #shared2>) -> tensor<32x128xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>>
      %118 = tt.dot %116, %117, %115 {allowTF32 = true} : tensor<16x32xf32, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 1}>> * tensor<32x128xf32, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 1}>> -> tensor<16x128xf32, #mma>
      %119 = arith.addi %arg15, %c1_i32 : i32
      %120 = arith.cmpi slt, %119, %32 : i32
      %121 = arith.remsi %arg16, %c2_i32 : i32
      %122 = arith.remsi %arg17, %c2_i32 : i32
      %123 = tt.addptr %34, %119 : !tt.ptr<i32>, i32
      %124 = tt.load %123, %120 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : i32
      %125 = arith.muli %124, %arg6 : i32
      %126 = arith.muli %125, %c128_i32 : i32
      %127 = arith.muli %126, %c32_i32 : i32
      %128 = arith.addi %127, %36 : i32
      %129 = tt.splat %128 : (i32) -> tensor<128x32xi32, #blocked1>
      %130 = arith.addi %129, %30 : tensor<128x32xi32, #blocked1>
      %131 = tt.addptr %37, %130 : tensor<128x32x!tt.ptr<f32>, #blocked1>, tensor<128x32xi32, #blocked1>
      %132 = tt.addptr %38, %130 : tensor<128x32x!tt.ptr<f32>, #blocked1>, tensor<128x32xi32, #blocked1>
      %133 = tt.splat %120 : (i1) -> tensor<128x32xi1, #blocked1>
      %134 = triton_gpu.insert_slice_async %131, %arg12, %121, %133 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32x!tt.ptr<f32>, #blocked1> -> tensor<2x128x32xf32, #shared1>
      triton_gpu.async_commit_group
      %135 = triton_gpu.insert_slice_async %132, %arg13, %121, %133 {axis = 0 : i32, cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x32x!tt.ptr<f32>, #blocked1> -> tensor<2x128x32xf32, #shared1>
      triton_gpu.async_commit_group
      triton_gpu.async_wait {num = 0 : i32}
      %136 = triton_gpu.extract_slice %134[%122, 0, 0] [1, 128, 32] [1, 1, 1] : tensor<2x128x32xf32, #shared1> to tensor<128x32xf32, #shared1>
      %137 = arith.addi %arg16, %c1_i32 : i32
      %138 = arith.addi %arg17, %c1_i32 : i32
      scf.yield %108, %90, %118, %134, %135, %136, %119, %137, %138 : tensor<16xf32, #blocked2>, tensor<16xf32, #blocked2>, tensor<16x128xf32, #mma>, tensor<2x128x32xf32, #shared1>, tensor<2x128x32xf32, #shared1>, tensor<128x32xf32, #shared1>, i32, i32, i32
    }
    triton_gpu.async_wait {num = 0 : i32}
    %57 = triton_gpu.convert_layout %56#0 : (tensor<16xf32, #blocked2>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>
    %58 = tt.expand_dims %57 {axis = 1 : i32} : (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>>) -> tensor<16x1xf32, #mma>
    %59 = tt.broadcast %58 : (tensor<16x1xf32, #mma>) -> tensor<16x128xf32, #mma>
    %60 = arith.divf %56#2, %59 : tensor<16x128xf32, #mma>
    %61 = arith.muli %5, %c128_i32 : i32
    %62 = arith.addi %61, %35 : i32
    %63 = tt.splat %62 : (i32) -> tensor<16x1xi32, #blocked>
    %64 = arith.addi %63, %11 : tensor<16x1xi32, #blocked>
    %65 = tt.broadcast %64 : (tensor<16x1xi32, #blocked>) -> tensor<16x128xi32, #blocked>
    %66 = arith.addi %65, %17 : tensor<16x128xi32, #blocked>
    %67 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<16x128x!tt.ptr<f32>, #blocked>
    %68 = tt.addptr %67, %66 : tensor<16x128x!tt.ptr<f32>, #blocked>, tensor<16x128xi32, #blocked>
    %69 = triton_gpu.convert_layout %60 : (tensor<16x128xf32, #mma>) -> tensor<16x128xf32, #blocked>
    tt.store %68, %69, %20 {cache = 1 : i32, evict = 1 : i32} : tensor<16x128xf32, #blocked>
    tt.return
  }
}

